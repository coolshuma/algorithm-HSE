int a[1000],t[2000]; //Interval Tree

void build(int v, int tl, int tr) //Build a Tree
{
	if (tl==tr)
	{
		t[v]=a[tl];
		return;
	}

	int m=(tl+tr)/2;

	build(v*2,tl,m);
	build(v*2+1,m+1,tr);

	t[v]=t[v*2]+t[v*2+1]; //Don't need for updating on interval
	return;
}

int sum(int v, int tl, int tr, int l, int r) //Sum on interval
{
	if (l>r)
		return 0;

	int m=(tl+tr)/2;

	if (tl==l && tr==r)
		return t[v];

	return sum(v*2,tl,m,l,min(r,m))+sum(v*2+1,m+1,tr,max(m+1,l),r);
}

void up(int v, int tl, int tr, int i, int x) //Update one element
{
	if (tl==tr && tl==i)
	{
		t[v]=x;
		return;
	}

	int m=(tl+tr)/2;

	if (i<=m)
		up(v*2,tl,m,i,x);
	else 
		up(v*2+1,m+1,tr,i,x);

	t[v]=t[v*2]+t[v*2+1];

	return;
}

void up_on_interval(int v, int tl, int tr, int l, int r, int x) //Update on interval
{
	if (l>r)
		return;

	if (tl==l && tr==r)
	{
		t[v]+=x;
		return;
	}

	int tm=(tl+tr)/2;

	up_on_interval(v*2,tl,tm,l,min(tm,r),x);
	up_on_interval(v*2+1,tm+1,tr,max(l,tm+1),r,x);
}

int get(int v, int tl, int tr, int i) //Get number from updating interval
{
	if (tl==tr && tl==i)
		return t[v];

	int tm=(tl+tr)/2;
	
	if (i<=tm)
		t[v]+get(v,tl,tm,i);
	else
		t[v]+get(v,tm+1,tr,i);
}


int main ()
{
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);

	int n,m;

	cin >> n;

	ms(t);

	for (int i=0; i<n; i++)
		cin >> a[i];

	build(1,0,n-1);

	cin >> m;

	up(1,0,n-1,3,9);

	for (int i=0; i<m; i++)
	{
		int l,r;
		cin >> l >> r;
		l--; r--;
		cout << l+1 << '-' << r+1 << ' ' << sum(1,0,n-1,l,r) << endl;
	}

	build(1,1,n);

    return 0;
}
 